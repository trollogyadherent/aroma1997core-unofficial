package aroma1997.core;

import aroma1997.core.command.AromaCommand;
import aroma1997.core.command.Sleeping;
import aroma1997.core.config.Conf;
import aroma1997.core.config.Config;
import aroma1997.core.coremod.CoreMod;
import aroma1997.core.events.EventListener;
import aroma1997.core.helper.Aroma1997CoreHelper;
import aroma1997.core.items.ItemsMain;
import aroma1997.core.log.LogHelperPre;
import aroma1997.core.network.NetworkHelper;
import aroma1997.core.network.packets.CapePacket;
import aroma1997.core.network.packets.PacketOpenInv;
import aroma1997.core.recipes.ShapedAromicRecipe;
import aroma1997.core.recipes.ShapelessAromicRecipe;
import aroma1997.core.util.AromaRegistry;
import aroma1997.core.util.Util;
import aroma1997.core.version.VersionCheck;
import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.Mod.Instance;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.discovery.ASMDataTable;
import cpw.mods.fml.common.event.FMLConstructionEvent;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;
import cpw.mods.fml.common.network.NetworkCheckHandler;
import cpw.mods.fml.relauncher.Side;
import java.io.File;
import java.util.Arrays;
import java.util.Map;
import net.minecraft.command.ICommand;
import net.minecraftforge.oredict.RecipeSorter;
import org.apache.logging.log4j.Level;

public class Aroma1997Core extends DummyModContainer {
  public static Aroma1997Core instance;
  
  @Instance("Aroma1997CoreHelper")
  public static Aroma1997CoreHelper helper;
  
  @SidedProxy(clientSide = "aroma1997.core.client.ClientProxy", serverSide = "aroma1997.core.CommonProxy")
  public static CommonProxy proxy;
  
  private ASMDataTable asm;
  
  public Aroma1997Core() {
    super(new ModMetadata());
    ModMetadata md = getMetadata();
    md.authorList = Arrays.asList(new String[] { "Aroma1997", "Schillaa" });
    md.version = Tags.VERSION;
    md.name = "Aroma1997Core (Unofficial)";
    md.modId = "Aroma1997Core";
    md.autogenerated = false;
    md.description = "This is basically a library used by most my other mods. Modified by trollogyadherent to let the user disable the hammer, for a purely server-side aroma backup possibility. Original url: http://www.minecraftforum.net/topic/1679684-. Thanks to SinTh0r4s for his ExampleMod.";
    md.useDependencyInformation = false;
    md.url = "";
    md.credits = "Code by Aroma1997, Textures by Schillaa";
    //md.logoFile = "logo.png";
    md.logoFile = "assets/aroma1997core/textures/logo.png";
    instance = this;
  }
  
  public boolean registerBus(EventBus bus, LoadController controller) {
    bus.register(this);
    return true;
  }
  
  @Subscribe
  public void construct(FMLConstructionEvent event) {
    this.asm = event.getASMHarvestedData();
  }
  
  @Subscribe
  public void preInit(FMLPreInitializationEvent event) {
    LogHelperPre.init();
    LogHelperPre.debugLog("Loading Aroma1997Core version " + Tags.VERSION + " for MC " + Tags.MCVERSION);
    Conf.init(event.getModConfigurationDirectory());
    Config.init();
    if (Config.registerHammer()) {
      AromaRegistry.register(ItemsMain.class);
      RecipeSorter.register("aroma1997core:shaped", ShapedAromicRecipe.class, RecipeSorter.Category.SHAPED, "after:minecraft:shaped before:minecraft:shapeless");
      RecipeSorter.register("aroma1997core:shapeless", ShapelessAromicRecipe.class, RecipeSorter.Category.SHAPELESS, "after:minecraft:shapeless");
    }
    NetworkHelper.getCorePacketHandler();
    LogHelperPre.log(Level.INFO, "Finished Pre-initialization.");
  }
  
  @Subscribe
  public void init(FMLInitializationEvent event) {
    proxy.init();
    NetworkHelper.getCorePacketHandler().registerMessage(CapePacket.class, CapePacket.class, 0, Side.CLIENT);
    NetworkHelper.getCorePacketHandler().registerMessage(PacketOpenInv.class, PacketOpenInv.class, 1, Side.SERVER);
    LogHelperPre.log(Level.INFO, "Finished Initialization.");
  }
  
  @Subscribe
  public void postInit(FMLPostInitializationEvent event) {
    VersionCheck.registerVersionChecker("Aroma1997Core", Tags.VERSION);
    VersionCheck.doVersionCheck();
    new EventListener();
    LogHelperPre.log(Level.INFO, "Finished Post-Initialization.");
  }
  
  @Subscribe
  public void serverStartup(FMLServerStartingEvent event) {
    File file = new File(Util.getWorldFolder(), "aroma1997");
    if (!file.exists())
      file.mkdir(); 
    event.registerServerCommand((ICommand)new Sleeping(event.getServer()));
    event.registerServerCommand((ICommand)new AromaCommand());
  }
  
  @NetworkCheckHandler
  public boolean checkModLists(Map<String, String> modList, Side side) {
    return true;
  }
  
  public File getSource() {
    if (CoreMod.coremodLocation != null)
      return CoreMod.coremodLocation; 
    return super.getSource();
  }
}
